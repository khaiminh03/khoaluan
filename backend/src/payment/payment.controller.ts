import {
  Controller,
  Post,
  Body,
  Headers,
  BadRequestException,
  NotFoundException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { OrdersService } from '../orders/orders.service';

@Controller('api/paymentapi')
export class PaymentController {
  constructor(
    private readonly configService: ConfigService,
    private readonly ordersService: OrdersService,
  ) {}

@Post('payment')
async handleWebhook(
  @Body() body: any,
  @Headers('authorization') authorization: string,
) {
  const expectedKey = this.configService.get<string>('SEPAY_WEBHOOK_KEY');

  if (!expectedKey) {
    console.error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng SEPAY_WEBHOOK_KEY trong .env');
    throw new Error('Thi·∫øu bi·∫øn SEPAY_WEBHOOK_KEY trong .env');
  }

 const cleaned = (authorization || '').trim().replace(/^Apikey\s+/i, '');
console.log('üîë Authorization:', authorization);
console.log('üîç Cleaned API Key:', cleaned);
console.log('üßæ Expected API Key (.env):', expectedKey);
if (cleaned !== expectedKey) {
  console.warn('‚ùå API Key sai ho·∫∑c thi·∫øu:', authorization);
  throw new BadRequestException('API Key kh√¥ng h·ª£p l·ªá');
}

  console.log('üì© Webhook SePay nh·∫≠n ƒë∆∞·ª£c:', JSON.stringify(body, null, 2));

  if (body.transferType !== 'in') {
    console.log('‚ÑπÔ∏è B·ªè qua giao d·ªãch kh√¥ng ph·∫£i ti·ªÅn v√†o:', body.transferType);
    return { message: 'Kh√¥ng ph·∫£i giao d·ªãch ti·ªÅn v√†o, b·ªè qua.' };
  }

  const content = body.content || '';
  console.log('üîç N·ªôi dung chuy·ªÉn kho·∫£n:', content);

  const matched = content.match(/don\s*([a-f0-9]{24})/i);

  if (!matched) {
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y orderId trong n·ªôi dung:', content);
    return { message: 'Kh√¥ng t√¨m th·∫•y orderId trong n·ªôi dung' };
  }

  const orderId = matched[1];
  console.log('üßæ M√£ ƒë∆°n h√†ng tr√≠ch xu·∫•t:', orderId);

  const order = await this.ordersService.findById(orderId);
  if (!order) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng:', orderId);
    throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
  }

  const amount = Number(body.transferAmount || 0);
  console.log(`üí∏ So kh·ªõp s·ªë ti·ªÅn: ${amount} so v·ªõi ${order.totalAmount}`);

  if (amount !== order.totalAmount) {
    console.warn(`‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng kh·ªõp: ${amount} ‚â† ${order.totalAmount}`);
    return { message: 'Sai s·ªë ti·ªÅn chuy·ªÉn kho·∫£n' };
  }

  const updated = await this.ordersService.markAsPaid(orderId);
  console.log('‚úÖ ƒê√£ x√°c nh·∫≠n thanh to√°n ƒë∆°n h√†ng:', updated._id);

  return { success: true, updatedOrder: updated };
}

}
